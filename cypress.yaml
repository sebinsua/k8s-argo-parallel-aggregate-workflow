# This example demonstrates the ability to pass artifacts
# from one step to the next.
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: cypress-

spec:
  entrypoint: run-tests

  volumeClaimTemplates:
    - metadata:
        name: spec-reports
      spec:
        accessModes: ["ReadWriteMany"]
        resources:
          requests:
            storage: 1Gi

  templates:
    - name: run-tests
      dag:
        tasks:
          - name: nginx-server
            template: nginx-server
          - name: extract-specs
            template: glob-specs
          - name: run-spec
            dependencies: [nginx-server, extract-specs]
            template: generate-spec-report
            arguments:
              parameters:
                - name: nginx-server-ip
                  value: "{{tasks.nginx-server.ip}}"
                - name: spec
                  value: "{{item}}"
            withParam: "{{tasks.extract-specs.outputs.result}}"
          - name: produce-spec-report
            dependencies: [run-spec]
            template: aggregate-spec-reports

    - name: nginx-server
      daemon: true
      container:
        image: nginx:latest
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 2
          timeoutSeconds: 1

    - name: glob-specs
      script:
        image: node:lts-alpine
        command: [node]
        source: |
          const cp = require('child_process');
          const specs = cp.execSync("find . -name '*.conf'").toString();
          console.log(
            JSON.stringify(
              specs.split('\n').filter(Boolean)
            )
          );

    - name: generate-spec-report
      inputs:
        parameters:
          - name: nginx-server-ip
          - name: spec
      container:
        image: byrnedo/alpine-curl:latest
        command: [sh, -c]
        args:
          [
            'curl http://{{inputs.parameters.nginx-server-ip}}:80 && echo "{{inputs.parameters.spec}} ($(echo -n {{inputs.parameters.spec}} | wc -m | xargs))" | tee /e2e/spec-reports/spec-report-{{pod.name}}.txt',
          ]
        volumeMounts:
          - name: spec-reports
            mountPath: /e2e/spec-reports

    - name: aggregate-spec-reports
      container:
        image: alpine:latest
        command: [sh, -c]
        args: ["cat /e2e/spec-reports/* > /tmp/aggregated-spec-report.txt"]
        volumeMounts:
          - name: spec-reports
            mountPath: /e2e/spec-reports
      outputs:
        artifacts:
          - name: aggregated-spec-report
            globalName: aggregated-spec-report
            path: /tmp/aggregated-spec-report.txt
            archive:
              none: {}
